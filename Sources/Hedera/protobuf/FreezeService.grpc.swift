//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: FreezeService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Proto_FreezeServicefreezeCall: ClientCallUnary {}

fileprivate final class Proto_FreezeServicefreezeCallBase: ClientCallUnaryBase<Proto_Transaction, Proto_TransactionResponse>, Proto_FreezeServicefreezeCall {
  override class var method: String { return "/proto.FreezeService/freeze" }
}


/// Instantiate Proto_FreezeServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Proto_FreezeServiceService: ServiceClient {
  /// Synchronous. Unary.
  func freeze(_ request: Proto_Transaction, metadata customMetadata: Metadata) throws -> Proto_TransactionResponse
  /// Asynchronous. Unary.
  @discardableResult
  func freeze(_ request: Proto_Transaction, metadata customMetadata: Metadata, completion: @escaping (Proto_TransactionResponse?, CallResult) -> Void) throws -> Proto_FreezeServicefreezeCall

}

internal extension Proto_FreezeServiceService {
  /// Synchronous. Unary.
  func freeze(_ request: Proto_Transaction) throws -> Proto_TransactionResponse {
    return try self.freeze(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func freeze(_ request: Proto_Transaction, completion: @escaping (Proto_TransactionResponse?, CallResult) -> Void) throws -> Proto_FreezeServicefreezeCall {
    return try self.freeze(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Proto_FreezeServiceServiceClient: ServiceClientBase, Proto_FreezeServiceService {
  /// Synchronous. Unary.
  internal func freeze(_ request: Proto_Transaction, metadata customMetadata: Metadata) throws -> Proto_TransactionResponse {
    return try Proto_FreezeServicefreezeCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func freeze(_ request: Proto_Transaction, metadata customMetadata: Metadata, completion: @escaping (Proto_TransactionResponse?, CallResult) -> Void) throws -> Proto_FreezeServicefreezeCall {
    return try Proto_FreezeServicefreezeCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Proto_FreezeServiceProvider: ServiceProvider {
  func freeze(request: Proto_Transaction, session: Proto_FreezeServicefreezeSession) throws -> Proto_TransactionResponse
}

extension Proto_FreezeServiceProvider {
  internal var serviceName: String { return "proto.FreezeService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/proto.FreezeService/freeze":
      return try Proto_FreezeServicefreezeSessionBase(
        handler: handler,
        providerBlock: { try self.freeze(request: $0, session: $1 as! Proto_FreezeServicefreezeSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Proto_FreezeServicefreezeSession: ServerSessionUnary {}

fileprivate final class Proto_FreezeServicefreezeSessionBase: ServerSessionUnaryBase<Proto_Transaction, Proto_TransactionResponse>, Proto_FreezeServicefreezeSession {}

